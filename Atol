/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package atol1;

//import com.atol.drivers.fptr.*;
import ru.atol.drivers10.fptr.Fptr;
import ru.atol.drivers10.fptr.IFptr;
import com.sun.org.apache.bcel.internal.generic.Type;
import java.io.IOException;
//import com.sun.xml.internal.ws.util.StringUtils;
//import com.atol.drivers.fptr.IFptr;

import java.math.BigDecimal;
//import java.util.Random;

public class test {

    private static final boolean USE_SHOWPROPERTIES = false;
    private static final boolean USE_FZ54 = false;
    private static final boolean PRINT_FISCAL_CHECK = false;
    private static final boolean PRINT_NONFISCAL_CHECK = true;
    private static final boolean ContinuePrint = false;
   
     public static void main(String[] args) {
        
         IFptr fptr = new Fptr();
        
        System.out.print("Driver version: " + fptr.version());
        
        fptr.setSingleSetting(IFptr.LIBFPTR_SETTING_PORT, String.valueOf(IFptr.LIBFPTR_PORT_USB));
        fptr.applySingleSettings();
        
        if (fptr.open() < 0 | !fptr.isOpened()) {
            ErrHandler(fptr, "Неудалось подключиться к ККТ");
            return;
        }
        
        int paperLength = 30;
        String symbol = "=";
        int countSteps = 4;
        int baseLength = 15;
        int repeatLine = 3;
        
//        fptr.setParam(IFptr.LIBFPTR_PARAM_TEXT_WRAP, IFptr.LIBFPTR_TW_WORDS);
//        printText(fptr, getString(symbol, paperLength, 1, 3), IFptr.LIBFPTR_ALIGNMENT_CENTER);
        fptr.setParam(IFptr.LIBFPTR_PARAM_TEXT, getString(symbol, paperLength, 1, 3));
        fptr.setParam(IFptr.LIBFPTR_PARAM_ALIGNMENT, IFptr.LIBFPTR_ALIGNMENT_CENTER);
        fptr.setParam(IFptr.LIBFPTR_PARAM_TEXT_WRAP, IFptr.LIBFPTR_TW_WORDS);
        fptr.printText();
        
        //Скругление
        for (int i = 2; i < countSteps; i++) {

            String headerString = getString(symbol, paperLength, i*3, 3);
            //printText(fptr, String.valueOf(headerString.length()), IFptr.ALIGNMENT_CENTER, IFptr.WRAP_LINE);
//            printText(fptr, headerString, IFptr.ALIGNMENT_CENTER, IFptr.WRAP_LINE);
            fptr.setParam(IFptr.LIBFPTR_PARAM_TEXT, headerString);
            fptr.setParam(IFptr.LIBFPTR_PARAM_ALIGNMENT, IFptr.LIBFPTR_ALIGNMENT_CENTER);
            fptr.setParam(IFptr.LIBFPTR_PARAM_TEXT_WRAP, IFptr.LIBFPTR_TW_NONE);
            fptr.printText();        
        }                
        
        //Основа                
        for (int i = 0; i <= baseLength; i++) {
//            printText(fptr, getString(symbol, paperLength, countSteps*3, 2), IFptr.ALIGNMENT_CENTER, IFptr.WRAP_LINE);
            fptr.setParam(IFptr.LIBFPTR_PARAM_TEXT, getString(symbol, paperLength, countSteps*3, 2));
            fptr.setParam(IFptr.LIBFPTR_PARAM_ALIGNMENT, IFptr.LIBFPTR_ALIGNMENT_CENTER);
            fptr.setParam(IFptr.LIBFPTR_PARAM_TEXT_WRAP, IFptr.LIBFPTR_TW_NONE);
            fptr.printText(); 
        }            
        

        //Подвал                
        int r = 5;

        for (double y = r; y >= -r; --y)
        {
                       
            String text = "";
                    
            for (double x = -r; x < r; x += 1)
            {
                double value = x * x + y * y;
                if (value >= r * r && value <= r * r)
                {
                    text += symbol;  
                }
                else
                {
                    text += " ";
                }
            }
                  
            String CentreString = getString(" ", paperLength - text.length()*2, 1, 1);
//            printText(fptr, text+CentreString+text, IFptr.ALIGNMENT_LEFT, IFptr.WRAP_LINE); 
            fptr.setParam(IFptr.LIBFPTR_PARAM_TEXT, text+CentreString+text);
            fptr.setParam(IFptr.LIBFPTR_PARAM_ALIGNMENT, IFptr.LIBFPTR_ALIGNMENT_LEFT);
            fptr.setParam(IFptr.LIBFPTR_PARAM_TEXT_WRAP, IFptr.LIBFPTR_TW_WORDS);
            fptr.printText(); 
                  
        } 
               
     }
     
    public static void ErrHandler(IFptr fptr, String exceptionText){
        
        System.out.println(String.format("%1$s: %2$d %3$s", exceptionText, fptr.errorCode(), fptr.errorDescription()));
    //      System.out.println("Проверьте кабель, переподключите ККТ в юсб разъем");
        System.out.println("Для закрытия окна, кнопку ENTER или закройте окно на крестик...");

        try {
            System.in.read();
        }
        catch(IOException e) {
    //      return;
    //      e.printStackTrace();
        }
        
    }
    private static String getString(String symbol, int maxLength, int step, int repeat) {

        String centreString = repeatString(" ", step);
        String result = repeatString(symbol, repeat) + centreString + repeatString(symbol, repeat);
        int restSpace = maxLength - result.length();
        String sideString = repeatString(" ", (int) restSpace / 2);

        return sideString + result + sideString;

    }

    private static String repeatString(String symbol, int count) {

        String result = "";

        for (int i = 1; i <= count; i++) {
            result += symbol;
        }

        return result;
    }

    private static class DriverException extends Exception {

        private static final long serialVersionUID = 6164921645357791803L;

        public DriverException(String msg) {
            super(msg);
        }
    }

    
}
